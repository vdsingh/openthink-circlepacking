[{"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/index.js":"1","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/App.js":"2","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/reportWebVitals.js":"3","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/data/postDummyData.js":"4","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/ZoomableCirclePacking.js":"5","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/data/data.js":"6"},{"size":591,"mtime":1611696840598,"results":"7","hashOfConfig":"8"},{"size":3841,"mtime":1611700803695,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1611075558712,"results":"10","hashOfConfig":"8"},{"size":6074,"mtime":1611078026659,"results":"11","hashOfConfig":"8"},{"size":4335,"mtime":1611697898210,"results":"12","hashOfConfig":"8"},{"size":12984,"mtime":1611078020998,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"2vbd1d",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/index.js",[],["28","29"],"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/App.js",["30"],"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/reportWebVitals.js",[],"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/data/postDummyData.js",[],"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/ZoomableCirclePacking.js",["31","32","33","34"],"import React, { useRef, useEffect } from \"react\";\n\nimport \"./App.css\";\nimport * as d3 from \"d3\";\nimport { data } from \"./data/data.js\";\n\nimport { dummyPosts, dummyRelations } from \"./data/postDummyData.js\";\n\nfunction ZoomableCirclePacking() {\n  const svgRef = useRef();\n\n  const width = 500;\n  const height = 500;\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    let pack = (data) =>\n      d3.pack().size([width, height]).padding(3)(\n        d3\n          .hierarchy(data)\n          .sum((d) => d.value)\n          .sort((a, b) => b.value - a.value)\n      );\n\n    let color = d3\n      .scaleLinear()\n      .domain([0, 5])\n      .range([\"hsl(152,80%,80%)\", \"hsl(228,30%,40%)\"])\n      .interpolate(d3.interpolateHcl);\n\n    const root = pack(data);\n    let focus = root;\n    let view;\n\n    const svg = d3\n      .create(\"svg\")\n      .attr(\"viewBox\", `-${width / 2} -${height / 2} ${width} ${height}`)\n      .style(\"display\", \"block\")\n      .style(\"margin\", \"0 -14px\")\n      .style(\"background\", color(0))\n      .style(\"cursor\", \"pointer\")\n      .on(\"click\", (event) => zoom(event, root));\n\n    const node = svg\n      .append(\"g\")\n      .selectAll(\"circle\")\n      .data(root.descendants().slice(1))\n      .join(\"circle\")\n      .attr(\"fill\", (d) => (d.children ? color(d.depth) : \"white\"))\n      .attr(\"pointer-events\", (d) => (!d.children ? \"none\" : null));\n\n    const label = svg\n      .append(\"g\")\n      .style(\"font\", \"10px sans-serif\")\n      .attr(\"pointer-events\", \"none\")\n      .attr(\"text-anchor\", \"middle\")\n      .selectAll(\"text\")\n      .data(root.descendants())\n      .join(\"text\")\n      .style(\"fill-opacity\", (d) => (d.parent === root ? 1 : 0))\n      .style(\"display\", (d) => (d.parent === root ? \"inline\" : \"none\"))\n      .text((d) => d.data.name);\n\n    zoomTo([root.x, root.y, root.r * 2]);\n\n    function zoomTo(v) {\n      const k = width / v[2];\n\n      view = v;\n\n      label.attr(\n        \"transform\",\n        (d) => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`\n      );\n      node.attr(\n        \"transform\",\n        (d) => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`\n      );\n      node.attr(\"r\", (d) => d.r * k);\n    }\n\n    function zoom(event, d) {\n      const focus0 = focus;\n\n      focus = d;\n\n      const transition = svg\n        .transition()\n        .duration(event.altKey ? 7500 : 750)\n        .tween(\"zoom\", (d) => {\n          const i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2]);\n          return (t) => zoomTo(i(t));\n        });\n\n      label\n        .filter(function (d) {\n          return d.parent === focus || this.style.display === \"inline\";\n        })\n        .transition(transition)\n        .style(\"fill-opacity\", (d) => (d.parent === focus ? 1 : 0))\n        .on(\"start\", function (d) {\n          if (d.parent === focus) this.style.display = \"inline\";\n        })\n        .on(\"end\", function (d) {\n          if (d.parent !== focus) this.style.display = \"none\";\n        });\n    }\n  }, []);\n\n  return (\n    <React.Fragment>\n      <span className=\"material-icons\"></span>\n      <svg ref={svgRef} width={width} height={height}></svg>\n    </React.Fragment>\n  );\n}\n\nfunction formatData(posts, relations) {\n  //Array containing the root objects (the parents)\n  let roots = [];\n\n  //map to get posts by id {postID, postObject}\n  let postsMap = new Map();\n\n  let colorMap = new Map();\n  colorMap.set(\"Idea\", \"rgb(51,102,255)\");\n  colorMap.set(\"Topic\", \"rgb(255,204,102)\");\n  colorMap.set(\"Concern\", \"rgb(255,0,0)\");\n  colorMap.set(\"Information\", \"rgb(224,224,209)\");\n\n  //map each post by ID\n  posts.forEach((post) => {\n    //give each post object a children array\n    post.children = [];\n    post.value = Math.floor(Math.random() * 100);\n    post.color = colorMap.get(post.type);\n\n    //map each post by its ID\n    postsMap.set(post._id, post);\n\n    //fill the roots array with all posts\n    roots.push(post);\n  });\n\n  for (let i = 0; i < relations.length; i++) {\n    let parent = postsMap.get(relations[i].post1);\n    let child = postsMap.get(relations[i].post2);\n\n    parent.children.push(child);\n    if (roots.includes(child)) roots.splice(roots.indexOf(child), 1);\n  }\n\n  return roots.length === 1\n    ? roots[0]\n    : {\n        value: 1,\n        children: roots,\n        color: colorMap.get(\"Idea\"),\n      };\n}\n\nexport default ZoomableCirclePacking;\n","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/data/data.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":17,"column":11,"nodeType":"41","messageId":"42","endLine":17,"endColumn":16},{"ruleId":"39","severity":1,"message":"43","line":7,"column":10,"nodeType":"41","messageId":"42","endLine":7,"endColumn":20},{"ruleId":"39","severity":1,"message":"44","line":7,"column":22,"nodeType":"41","messageId":"42","endLine":7,"endColumn":36},{"ruleId":"39","severity":1,"message":"45","line":83,"column":13,"nodeType":"41","messageId":"42","endLine":83,"endColumn":19},{"ruleId":"39","severity":1,"message":"46","line":118,"column":10,"nodeType":"41","messageId":"42","endLine":118,"endColumn":20},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'color' is assigned a value but never used.","Identifier","unusedVar","'dummyPosts' is defined but never used.","'dummyRelations' is defined but never used.","'focus0' is assigned a value but never used.","'formatData' is defined but never used.","no-global-assign","no-unsafe-negation"]