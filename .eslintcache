[{"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/index.js":"1","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/reportWebVitals.js":"2","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/data/postDummyData.js":"3","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/data/data.js":"4","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/components/ZoomableCirclePack.js":"5","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/data/simpleData.js":"6","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/components/ArcTextZoomableCirclePacking.js":"7"},{"size":872,"mtime":1620160384035,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1611075558712,"results":"10","hashOfConfig":"9"},{"size":6054,"mtime":1619554287159,"results":"11","hashOfConfig":"9"},{"size":12984,"mtime":1611078020998,"results":"12","hashOfConfig":"9"},{"size":9431,"mtime":1620163292320,"results":"13","hashOfConfig":"9"},{"size":583,"mtime":1617716346349,"results":"14","hashOfConfig":"9"},{"size":7901,"mtime":1620160233963,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"2vbd1d",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"19"},"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/index.js",["35"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport ZoomableCirclePack from \"./components/ZoomableCirclePack\";\nimport ArcTextZoomableCirclePacking from \"./components/ArcTextZoomableCirclePacking\";\n\nimport { dummyPosts, dummyRelations } from \"./data/postDummyData.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ZoomableCirclePack\n      posts={dummyPosts}\n      relations={dummyRelations}\n      width={700}\n      height={700}\n    />\n    {/* <ArcTextZoomableCirclePacking posts=dummyPosts> */}\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["36","37"],"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/reportWebVitals.js",[],"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/data/postDummyData.js",[],"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/data/data.js",[],["38","39"],"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/components/ZoomableCirclePack.js",["40"],"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/data/simpleData.js",[],["41","42"],"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/components/ArcTextZoomableCirclePacking.js",["43","44"],"import React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\n// import { data } from \"../data/data.js\";\n// import { dummyPosts, dummyRelations } from \"../data/postDummyData.js\";\n// import { post } from \"../data/simpleData.js\";\n\nfunction ArcTextZoomableCirclePacking() {\n  const svgRef = useRef();\n\n  const width = 700;\n  const height = 700;\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    let color = d3\n      .scaleLinear()\n      .domain([0, 5])\n      .range([\"hsl(152,80%,80%)\", \"hsl(228,30%,40%)\"])\n      .interpolate(d3.interpolateHcl);\n\n    let pack = (data) =>\n      d3.pack().size([width, height]).padding(3)(\n        d3\n          .hierarchy(data)\n          .sum((d) => d.value)\n          .sort((a, b) => b.value - a.value)\n      );\n\n    const root = pack(formatData(posts, relations, \"\"));\n    // const root = pack(formatData(post, [], \"\"));\n\n    let focus = root;\n    let view;\n\n    const svg = d3\n      .select(svgRef.current)\n      .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n      // .style(\"display\", \"block\")\n      .style(\"margin\", \"20px 20px 20px 20px\")\n      .style(\"cursor\", \"pointer\")\n      .on(\"click\", (event) => zoom(event, root));\n\n    const node = svg\n      .append(\"g\")\n      .selectAll(\"circle\")\n      .data(root.descendants().slice(1))\n      .join(\"circle\")\n      .attr(\"fill\", (d) => (d.children ? color(d.depth) : \"white\"))\n      .attr(\"pointer-events\", (d) => (!d.children ? \"none\" : null))\n      .style(\"display\", \"block\")\n      // .style()\n      .on(\"mouseover\", function () {\n        d3.select(this).attr(\"stroke\", \"#000000\");\n      })\n      .on(\"mouseout\", function () {\n        d3.select(this).attr(\"stroke\", null);\n      })\n      .on(\n        \"click\",\n        (event, d) => focus !== d && (zoom(event, d), event.stopPropagation())\n      )\n      .on(\"dblclick\", function (event, d) {\n        window.open(\"https://www.google.com/\");\n      });\n\n    svg.style(\"background-color\", \"#A3F5CF\");\n\n    const paths = svg\n      .append(\"g\")\n      .attr(\"class\", \"paths\")\n      .style(\"font\", \"20px sans-serif\")\n      .style(\"font-weight\", \"bold\")\n      .style(\n        \"text-shadow\",\n        \"0 0 2px white, 0 0 2px white, 0 0 2px white, 0 0 2px white\"\n      )\n      .attr(\"pointer-events\", \"none\")\n      .attr(\"text-anchor\", \"middle\")\n      .selectAll(\"text\")\n      .data(root.descendants())\n      .join(\"path\")\n      .attr(\"id\", (d) => d.data._id) //Unique id of the path\n      .attr(\"d\", (d) => console.log(d.data.name + \": \" + d.y))\n      .attr(\n        \"d\",\n        (d) =>\n          `M ${-(width / 2) + d.x - d.r}, ${-(height / 2) + d.y} A ${d.r}, ${\n            d.r\n          } 0 0, 1 ${-(width / 2) + d.x + d.r}, ${-(height / 2) + d.y}`\n      )\n      .style(\"display\", \"inline\")\n      .style(\"fill\", \"none\");\n\n    const labels = svg\n      .append(\"g\")\n      .attr(\"class\", \"labels\")\n      .style(\"font-weight\", \"bold\")\n      .style(\n        \"text-shadow\",\n        \"0 0 1px white, 0 0 1px white, 0 0 1px white, 0 0 1px white\"\n      )\n      .selectAll(\"text\")\n      .data(root.descendants())\n      .join(\"text\")\n      .append(\"textPath\") //append a textPath to the text element\n      .attr(\"xlink:href\", (d) => \"#\" + d.data._id) //place the ID of the path here\n      .style(\"text-anchor\", \"middle\") //place the text halfway on the arc\n      .attr(\"startOffset\", \"50%\")\n      .style(\"font\", \"20px sans-serif\")\n      .style(\"display\", (d) => (d.parent === root ? \"inline\" : \"none\"))\n      .text((d) => d.data.name);\n\n    const icon = svg\n      .append(\"g\")\n      .attr(\"class\", \"icons\")\n      .style(\"font\", \"20px sans-serif\")\n      .style(\n        \"text-shadow\",\n        \"0 0 2px white, 0 0 2px white, 0 0 2px white, 0 0 2px white\"\n      )\n      .attr(\"pointer-events\", \"none\")\n      .attr(\"text-anchor\", \"middle\")\n      .selectAll(\"text\")\n      .data(root.descendants())\n      .join(\"text\")\n      .style(\"fill-opacity\", (d) => (d.parent === root ? 1 : 0))\n      .style(\"display\", (d) => (d.parent === root ? \"inline\" : \"none\"))\n      .attr(\"class\", \"material-icons\")\n      .text((d) => d.data.icon);\n\n    zoomTo([root.x, root.y, root.r * 2]);\n\n    function zoomTo(v) {\n      const k = width / v[2];\n      console.log(\"width \" + width);\n\n      view = v;\n\n      // paths.attr(\n      //   \"transform\",\n      //   (d) => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`\n      // );\n\n      icon.attr(\"transform\", (d) =>\n        d.children == null\n          ? `translate(${(d.x - v[0]) * k - 20},${(d.y - v[1]) * k + 10})`\n          : `translate(${(d.x - v[0]) * k - 20},${(d.y - v[1]) * k - 5 - d.r})`\n      );\n      node.attr(\n        \"transform\",\n        (d) => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`\n      );\n\n      node.attr(\"r\", (d) => d.r * k);\n    }\n\n    function zoom(event, d) {\n      focus = d;\n\n      const transition = svg\n        .transition()\n        .duration(event.altKey ? 7500 : 750)\n        .tween(\"zoom\", (d) => {\n          const i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2]);\n          return (t) => zoomTo(i(t));\n        });\n\n      labels\n        .filter(function (d) {\n          return d.parent === focus || this.style.display === \"inline\";\n        })\n        .transition(transition)\n        .style(\"fill-opacity\", (d) => (d.parent === focus ? 1 : 0))\n        .on(\"start\", function (d) {\n          if (d.parent === focus) this.style.display = \"inline\";\n        })\n        .on(\"end\", function (d) {\n          if (d.parent !== focus) this.style.display = \"none\";\n        });\n\n      icon\n        .filter(function (d) {\n          return d.parent === focus || this.style.display === \"inline\";\n        })\n        .transition(transition)\n        .style(\"fill-opacity\", (d) => (d.parent === focus ? 1 : 0))\n        .on(\"start\", function (d) {\n          if (d.parent === focus) this.style.display = \"inline\";\n        })\n        .on(\"end\", function (d) {\n          if (d.parent !== focus) this.style.display = \"none\";\n        });\n    }\n  }, []);\n\n  return (\n    <React.Fragment>\n      <svg ref={svgRef} width={width} height={height}></svg>\n    </React.Fragment>\n  );\n}\n\nfunction formatData(posts, relations, filter) {\n  //Array containing the root objects (the parents)\n  let roots = [];\n\n  //map to get posts by id {postID, postObject}\n  let postsMap = new Map();\n\n  let colorMap = new Map();\n  colorMap.set(\"Idea\", \"#086788)\");\n  colorMap.set(\"Topic\", \"#07A0C3\");\n  colorMap.set(\"Concern\", \"#F0C808\");\n  colorMap.set(\"Information\", \"#FFF1D0\");\n  colorMap.set(\"Action Item\", \"#DD1C1A\");\n  colorMap.set(\"Event\", \"#554348\");\n  colorMap.set(\"Question\", \"#7E3F8F\");\n\n  let iconMap = new Map();\n  iconMap.set(\"Idea\", \"emoji_objects\");\n  iconMap.set(\"Topic\", \"device_hub\");\n  iconMap.set(\"Concern\", \"error\");\n  iconMap.set(\"Information\", \"info\");\n  iconMap.set(\"Action Item\", \"check_circle\");\n  iconMap.set(\"Event\", \"event\");\n  iconMap.set(\"Question\", \"help\");\n\n  //map each post by ID\n  posts.forEach((post) => {\n    //give each post object a children array\n    post.children = [];\n    post.value = post.votes;\n    post.color = colorMap.get(post.type);\n    post.icon = iconMap.get(post.type);\n    post.name = post.title;\n\n    //map each post by its ID\n    postsMap.set(post._id, post);\n\n    //fill the roots array with all posts (we will remove non-roots later)\n    if (post.type === filter || filter === \"\") roots.push(post);\n  });\n\n  for (let i = 0; i < relations.length; i++) {\n    let parent = postsMap.get(relations[i].post1);\n    let child = postsMap.get(relations[i].post2);\n    if (filter !== \"\" && (parent.type !== filter || child.type !== filter)) {\n      continue;\n    }\n\n    parent.children.push(child);\n\n    //we remove child from the roots array because obviously no child is a root\n    if (roots.includes(child)) roots.splice(roots.indexOf(child), 1);\n  }\n\n  return {\n    value: 1,\n    children: roots,\n  };\n}\n\nexport default ArcTextZoomableCirclePacking;\n",{"ruleId":"45","severity":1,"message":"46","line":6,"column":8,"nodeType":"47","messageId":"48","endLine":6,"endColumn":36},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"49","replacedBy":"53"},{"ruleId":"51","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":206,"column":6,"nodeType":"57","endLine":206,"endColumn":8,"suggestions":"58"},{"ruleId":"49","replacedBy":"59"},{"ruleId":"51","replacedBy":"60"},{"ruleId":"45","severity":1,"message":"61","line":69,"column":11,"nodeType":"47","messageId":"48","endLine":69,"endColumn":16},{"ruleId":"55","severity":1,"message":"62","line":195,"column":6,"nodeType":"57","endLine":195,"endColumn":8,"suggestions":"63"},"no-unused-vars","'ArcTextZoomableCirclePacking' is defined but never used.","Identifier","unusedVar","no-native-reassign",["64"],"no-negated-in-lhs",["65"],["64"],["65"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'height', 'props.posts', 'props.relations', and 'width'. Either include them or remove the dependency array.","ArrayExpression",["66"],["64"],["65"],"'paths' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'posts' and 'relations'. Either include them or remove the dependency array.",["67"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},"Update the dependencies array to be: [height, props.posts, props.relations, width]",{"range":"72","text":"73"},"Update the dependencies array to be: [posts, relations]",{"range":"74","text":"75"},[6744,6746],"[height, props.posts, props.relations, width]",[5991,5993],"[posts, relations]"]