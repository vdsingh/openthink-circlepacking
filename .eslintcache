[{"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/index.js":"1","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/reportWebVitals.js":"2","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/data/postDummyData.js":"3","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/data/data.js":"4","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/ZoomableCirclePack.js":"5","/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/CirclePack.js":"6"},{"size":611,"mtime":1613516739164,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1611075558712,"results":"9","hashOfConfig":"8"},{"size":6074,"mtime":1611078026659,"results":"10","hashOfConfig":"8"},{"size":12984,"mtime":1611078020998,"results":"11","hashOfConfig":"8"},{"size":6708,"mtime":1614119458540,"results":"12","hashOfConfig":"8"},{"size":3859,"mtime":1612407651864,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"2vbd1d",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"17"},"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/index.js",["29"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport CirclePack from \"./CirclePack\";\nimport ZoomableCirclePack from \"./ZoomableCirclePack\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <CirclePack /> */}\n    <ZoomableCirclePack />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["30","31"],"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/reportWebVitals.js",[],"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/data/postDummyData.js",[],"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/data/data.js",[],"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/ZoomableCirclePack.js",["32","33"],"/Users/viksingh/Desktop/Web Development/React Projects/openthink-circlepacking/src/CirclePack.js",["34"],"import React, { useRef, useEffect } from \"react\";\n\n// import \"./App.css\";\nimport * as d3 from \"d3\";\n// import { data } from \"./data/data.js\";\n\nimport { dummyPosts, dummyRelations } from \"./data/postDummyData.js\";\n\nfunction CirclePack() {\n  const svgRef = useRef();\n\n  const width = 400;\n  const height = 400;\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const color = d3.scaleSequential([8, 0], d3.interpolateMagma);\n    const format = d3.format(\",d\");\n\n    let pack = (data) =>\n      d3\n        .pack()\n        .size([width - 2, height - 2])\n        .padding(3)(\n        d3\n          .hierarchy(data)\n          .sum((d) => d.value)\n          .sort((a, b) => b.value - a.value)\n      );\n\n    const svg = d3.select(svgRef.current);\n    const root = pack(formatData(dummyPosts, dummyRelations));\n\n    svg\n      .attr(\"viewBox\", [0, 0, width, height])\n      .style(\"font\", \"10px sans-serif\")\n      .attr(\"text-anchor\", \"middle\");\n\n    const node = svg\n      .selectAll(\"g\")\n      .data(d3.group(root.descendants(), (d) => d.height))\n      .join(\"g\")\n      .selectAll(\"g\")\n      .data((d) => d[1])\n      .join(\"g\")\n      .attr(\"transform\", (d) => `translate(${d.x + 1},${d.y + 1})`);\n\n    node\n      .append(\"circle\")\n      .attr(\"r\", (d) => d.r)\n      .attr(\"fill\", (d) => d.data.color)\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", \"2\");\n\n    const leaf = node.filter((d) => !d.children);\n\n    leaf\n      .append(\"text\")\n      .append(\"tspan\")\n      .attr(\"x\", -25)\n      .attr(\"y\", 10)\n      .attr(\"class\", \"material-icons\")\n      .text((d) => d.data.icon);\n\n    leaf\n      .append(\"text\")\n      .attr(\"clip-path\", (d) => d.clipUid)\n      .selectAll(\"tspan\")\n      .data((d) => d.data.title.split(/(?=[A-Z][a-z])|\\s+/g))\n      .join(\"tspan\")\n      .attr(\"x\", 0)\n      .attr(\"y\", (d, i, nodes) => `${i - nodes.length / 2 + 0.8}em`)\n      .text((d) => d);\n\n    leaf.select(\"text\");\n\n    node.append(\"title\").text(\n      (d) =>\n        `${d\n          .ancestors()\n          .map((d) => d.data.title)\n          .reverse()\n          .join(\"/\")}\\n${format(d.value)}`\n    );\n  }, []);\n\n  return (\n    <React.Fragment>\n      <svg ref={svgRef} width={width} height={height}></svg>\n    </React.Fragment>\n  );\n}\n\nfunction formatData(posts, relations) {\n  //Array containing the root objects (the parents)\n  let roots = [];\n\n  //map to get posts by id {postID, postObject}\n  let postsMap = new Map();\n\n  let colorMap = new Map();\n  colorMap.set(\"Idea\", \"rgb(51,102,255)\");\n  colorMap.set(\"Topic\", \"rgb(255,204,102)\");\n  colorMap.set(\"Concern\", \"rgb(255,0,0)\");\n  colorMap.set(\"Information\", \"rgb(224,224,209)\");\n  colorMap.set(\"Action Item\", \"\");\n  colorMap.set(\"Event\", \"\");\n  colorMap.set(\"Question\", \"\");\n\n  let iconMap = new Map();\n  iconMap.set(\"Idea\", \"emoji_objects\");\n  iconMap.set(\"Topic\", \"device_hub\");\n  iconMap.set(\"Concern\", \"error\");\n  iconMap.set(\"Information\", \"info\");\n  iconMap.set(\"Action Item\", \"check_circle\");\n  iconMap.set(\"Event\", \"event\");\n  iconMap.set(\"Question\", \"help\");\n\n  //map each post by ID\n  posts.forEach((post) => {\n    //give each post object a children array\n    post.children = [];\n    post.value = Math.floor(Math.random() * 100 + 50);\n    post.color = colorMap.get(post.type);\n    post.icon = iconMap.get(post.type);\n\n    //map each post by its ID\n    postsMap.set(post._id, post);\n\n    //fill the roots array with all posts\n    roots.push(post);\n  });\n\n  for (let i = 0; i < relations.length; i++) {\n    let parent = postsMap.get(relations[i].post1);\n    let child = postsMap.get(relations[i].post2);\n\n    parent.children.push(child);\n    if (roots.includes(child)) roots.splice(roots.indexOf(child), 1);\n  }\n\n  return roots.length === 1\n    ? roots[0]\n    : {\n        value: 1,\n        children: roots,\n        color: colorMap.get(\"Idea\"),\n      };\n}\n\nexport default CirclePack;\n",{"ruleId":"35","severity":1,"message":"36","line":5,"column":8,"nodeType":"37","messageId":"38","endLine":5,"endColumn":18},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"35","severity":1,"message":"43","line":5,"column":10,"nodeType":"37","messageId":"38","endLine":5,"endColumn":14},{"ruleId":"35","severity":1,"message":"44","line":131,"column":13,"nodeType":"37","messageId":"38","endLine":131,"endColumn":19},{"ruleId":"35","severity":1,"message":"45","line":17,"column":11,"nodeType":"37","messageId":"38","endLine":17,"endColumn":16},"no-unused-vars","'CirclePack' is defined but never used.","Identifier","unusedVar","no-native-reassign",["46"],"no-negated-in-lhs",["47"],"'data' is defined but never used.","'focus0' is assigned a value but never used.","'color' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]